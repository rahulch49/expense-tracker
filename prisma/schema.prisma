// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdExpenses Expense[]      @relation("ExpenseCreatedBy")
  updatedExpenses Expense[]      @relation("ExpenseUpdatedBy")
  createdGroups   Group[]
  groupMembers    GroupMembers[]
}

model Expense {
  id          Int      @id @default(autoincrement())
  name        String
  amount      Float
  groupId     Int
  group       Group    @relation(fields: [groupId], references: [id])
  description String?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy Int
  updatedBy Int
  creator   User @relation("ExpenseCreatedBy", fields: [createdBy], references: [id])
  updator   User @relation("ExpenseUpdatedBy", fields: [updatedBy], references: [id])
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  isDeleted Boolean  @default(false)

  user         User           @relation(fields: [createdBy], references: [id])
  groupMembers GroupMembers[]
  expenses     Expense[]
}

model GroupMembers {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}
