// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
enum ExpenseCategory {
    FOOD
    SHOPPING
    FUEL
    RENT
    OTHER
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String         @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String

  createdExpenses Expense[]      @relation("ExpenseCreatedBy")
  updatedExpenses Expense[]      @relation("ExpenseUpdatedBy")
  createdGroups   Group[]
  groupMembers    GroupMembers[]
  token           Token[]
  expenseParticipant  ExpenseParticipant[]
  settlementsPaid     Settlement[]  @relation("PaidBy")
  settlementsReceived Settlement[]  @relation("PaidTo")
}

model Expense {
  id                String         @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  amount            Float
  groupId           String         @db.Uuid
  group             Group          @relation(fields: [groupId], references: [id])
  description       String?
  category          ExpenseCategory
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isDeleted         Boolean       @default(false)

  createdBy         String         @db.Uuid
  updatedBy         String         @db.Uuid
  creator           User           @relation("ExpenseCreatedBy", fields: [createdBy], references: [id])
  updator           User           @relation("ExpenseUpdatedBy", fields: [updatedBy], references: [id])
  participants      ExpenseParticipant[]
}

model Group {
  id        String          @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  createdBy String          @db.Uuid
  isDeleted Boolean         @default(false)

  user         User           @relation(fields: [createdBy], references: [id])
  groupMembers GroupMembers[]
  expenses     Expense[]
  settlements  Settlement[]
}

model GroupMembers {
  id        String          @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupId   String          @db.Uuid
  userId    String          @db.Uuid
  isDeleted Boolean         @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

model Token {
  id            String        @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String        @db.Uuid
  refreshToken  String        @unique
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
}

model ExpenseParticipant {
  id            String        @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expenseId     String        @db.Uuid
  userId        String        @db.Uuid
  owes          Float         @default(0.0)
  paid          Float         @default(0.0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)

  user          User          @relation(fields: [userId], references: [id])
  expense       Expense       @relation(fields: [expenseId], references: [id])
}

model Settlement {
  id            String            @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupId       String            @db.Uuid
  paidBy        String            @db.Uuid
  paidTo        String            @db.Uuid
  amountPaid    Float
  createdAt     DateTime          @default(now())

  group         Group             @relation(fields: [groupId], references: [id])
  payer         User              @relation("PaidBy", fields: [paidBy], references: [id])
  receiver      User              @relation("PaidTo", fields: [paidTo], references: [id])

}